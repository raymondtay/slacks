# Configuration file for slacks
# @author Raymond Tay
# @version 1.0
#
#

# Notes:
# (a) all parameters in `params` are either mandatory or optional
# (b) optional parameters are marked with question marks at the suffix (i.e. "?")
# (c) https://api.slack.com/docs/oauth
# (d) all time are measured in seconds
#

slacks.oauth.credential {
  clientid = "test-slack-id"
  clientid = ${?SLACK_CLIENT_ID}
  clientsecretkey = "test-slack-secretkey"
  clientsecretkey = ${?SLACK_SECRET_KEY}
}

slacks.oauth.auth {
  url = "https://slack.com/oauth/authorize"
  params = ["client_id", "scope", "redirect_uri?", "state?", "team?"]

  # For extracting the kinds of scopes is associated with the token
  # However, its odd that it would be named `files.list`
  scope {
    url = "https://slack.com/api/files.list"
    params = ["token"]
    timeout = 3
  }

}


slacks.oauth.access {
  url = "https://slack.com/api/oauth.access"
  params = ["client_id", "client_secret", "code", "redirect_uri?"]
  timeout = 5
}

# As the number of channels to be retrieved can be large, its wise to 
# include a wider(larger) time limit
slacks.api.channel.list {
  url = "https://slack.com/api/channels.list"
  params = ["token", "cursor?", "exclude_archived?", "exclude_members?", "limit?"]
  timeout = 8
}

slacks.api.channel.read {
  url = "https://slack.com/api/conversations.history"
  params = ["token", "channel", "count?", "inclusive?", "latest?", "oldest?", "unreads?"]
  timeout = 60
}

slacks.api.conversation.read.replies {
  url = "https://slack.com/api/conversations.replies"
  params = ["token", "channel", "ts", "cursor?", "inclusive?", "latest?", "oldest?"]
  timeout = 3
}

slacks.api.users.list {
  url = "https://slack.com/api/users.list"
  params = ["token", "cursor?", "include_locale?", "limit?", "presence?"]
  timeout = 10
}

slacks.api.team.info {
  url = "https://slack.com/api/team.info"
  params = ["token"]
  timeout = 5
}

slacks.api.emoji.list {
  url = "https://slack.com/api/emoji.list"
  params = ["token"]
  timeout = 3
}

# The following are the slack's subtype of messages that we don't want
# to sieve through looking for user mentions in the 'text' field of the raw
# json data
slacks.usermentions.blacklist {

messagetypes=["channel_archive","channel_join","channel_leave",
        "channel_name","channel_purpose","channel_topic",
        "channel_unarchive", "file_mention", "group_archive","group_join",
        "group_leave","group_name","group_purpose","group_topic",
        "group_unarchive", "pinned_item","unpinned_item", "bot_add","bot_remove"]
}

